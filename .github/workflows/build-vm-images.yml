name: Build VM Images

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the images'
        required: true
        default: 'nightly'
        type: string
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
  schedule:
    # Build monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'

env:
  PACKER_VERSION: "1.10.0"
  PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build-vm-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="nightly-$(date +%Y%m%d)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building VM images for version: $VERSION"

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm qemu-utils qemu-system-x86 qemu-system-arm \
            libvirt-daemon-system libvirt-clients bridge-utils virt-manager \
            ovmf qemu-efi-aarch64 zstd
          
          # Debug: Check available QEMU components
          echo "🔍 Available QEMU components:"
          echo "  AMD64: $(qemu-system-x86_64 --version | head -1)"
          echo "  ARM64: $(qemu-system-aarch64 --version | head -1)"

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Setup QEMU for cross-platform builds
        if: matrix.arch == 'arm64'
        run: |
          # Setup QEMU for ARM64 emulation
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create output directory
        run: |
          mkdir -p vm-images/output vm-images/files

      - name: Generate SSH keys for build
        run: |
          ssh-keygen -t rsa -b 4096 -f vm-images/build_key -N "" -C "birdnet-go-build-${{ matrix.arch }}"
          chmod 600 vm-images/build_key
          chmod 644 vm-images/build_key.pub

      - name: Verify template files exist
        run: |
          echo "📁 Checking existing template files..."
          ls -la vm-images/templates/
          echo "📄 user-data.yml content preview:"
          head -10 vm-images/templates/user-data.yml

      - name: Create setup scripts
        run: |
          # Copy existing setup script instead of recreating it
          cp vm-images/scripts/setup-birdnet-go.sh vm-images/scripts/setup-birdnet-go.sh.bak || true
          
          chmod +x vm-images/scripts/setup-birdnet-go.sh

      - name: Verify script files exist
        run: |
          # Scripts should already exist in the repository
          ls -la vm-images/scripts/
          chmod +x vm-images/scripts/*.sh

      - name: Verify all required files
        run: |
          echo "📁 Checking VM build files..."
          ls -la vm-images/
          echo "📁 Scripts directory:"
          ls -la vm-images/scripts/
          echo "📁 Templates directory:"
          ls -la vm-images/templates/

      - name: Initialize Packer
        working-directory: vm-images
        run: |
          packer init birdnet-go-vm.pkr.hcl

      - name: Validate Packer configuration
        working-directory: vm-images
        run: |
          SSH_PUBLIC_KEY=$(cat build_key.pub)
          packer validate \
            -var "version=${{ steps.version.outputs.version }}" \
            -var "arch=${{ matrix.arch }}" \
            -var "ssh_public_key=$SSH_PUBLIC_KEY" \
            -var "ssh_private_key_file=build_key" \
            -var "use_kvm=false" \
            birdnet-go-vm.pkr.hcl

      - name: Build VM image
        working-directory: vm-images
        timeout-minutes: ${{ matrix.arch == 'arm64' && 120 || 90 }}  # ARM64 TCG builds need more time
        env:
          PACKER_LOG: 1
          PACKER_LOG_PATH: packer-build.log
        run: |
          echo "🏗️ Building VM image for ${{ matrix.arch }}..."
          echo "ℹ️  Using TCG acceleration (no KVM in GitHub Actions)"
          
          # Debug environment
          echo "🔍 QEMU version: $(qemu-system-${{ matrix.arch == 'amd64' && 'x86_64' || 'aarch64' }} --version | head -1)"
          echo "🔍 Using TCG acceleration for ${{ matrix.arch }} architecture"
          echo "🔍 SSH public key:"
          cat build_key.pub
          
          SSH_PUBLIC_KEY=$(cat build_key.pub)
          packer build \
            -var "version=${{ steps.version.outputs.version }}" \
            -var "arch=${{ matrix.arch }}" \
            -var "ssh_public_key=$SSH_PUBLIC_KEY" \
            -var "ssh_private_key_file=build_key" \
            -var "use_kvm=false" \
            birdnet-go-vm.pkr.hcl || {
              echo "❌ Packer build failed. Showing debug logs:"
              echo "📋 Last 100 lines of Packer log:"
              tail -n 100 packer-build.log || echo "No packer log found"
              exit 1
            }

      - name: Verify build artifacts
        working-directory: vm-images
        run: |
          ls -la output-${{ matrix.arch }}/
          echo "📦 Build artifacts:"
          for file in output-${{ matrix.arch }}/*; do
            echo "  $(basename $file): $(du -h $file | cut -f1)"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: birdnet-go-vm-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: vm-images/output-${{ matrix.arch }}/*
          retention-days: 30

  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    needs: build-vm-images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.qcow2.zst*" -exec cp {} release-assets/ \;
          
          echo "📦 Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # BirdNET-Go VM Images ${{ steps.version.outputs.version }}
          
          Pre-built virtual machine images with BirdNET-Go pre-installed and configured.
          
          ## 🔐 Security Information
          
          **Default User Account:**
          - Username: \`birdnet\`
          - Password: \`birdnetgo\`
          - **⚠️ IMPORTANT: Change the default password immediately after first login!**
          
          **Security Features:**
          - Password and SSH key authentication enabled
          - Sudo access requires password (no passwordless sudo)
          - Password change reminder until default password is changed
          - SSH access limited to specific users with connection limits
          
          ## 🎯 Quick Start
          
          1. **Download** the image for your architecture
          2. **Verify** the checksum: \`sha256sum -c *.sha256\`
          3. **Decompress**: \`zstd -d *.qcow2.zst\`
          4. **Create** a separate data disk: \`qemu-img create -f qcow2 birdnet-go-data.qcow2 50G\`
          5. **Deploy** VM with both disks attached
          6. **Login** via SSH: \`ssh birdnet@vm-ip\` (password: \`birdnetgo\`)
          7. **Change password**: \`passwd\` (REQUIRED for security)
          8. **Access** web interface: \`http://vm-ip:8080\`
          
          ## 📦 Available Images
          
          - **amd64**: Intel/AMD 64-bit processors
          - **arm64**: ARM 64-bit processors (Apple M1/M2, ARM servers)
          
          ## 🔧 Specifications
          
          - **Base OS**: Ubuntu 24.10 (Oracular Oriole) Server
          - **Docker**: Latest version with BirdNET-Go pre-configured
          - **Architecture**: Two-disk setup (8GB OS + user-defined data disk)
          - **Memory**: 4GB minimum, 8GB recommended
          - **Network**: Port 8080 (web), Port 22 (SSH)
          
          ## 🖥️ Supported Platforms
          
          - **Proxmox VE**: Native qcow2 support
          - **libvirt/KVM**: Native qcow2 support  
          - **VMware**: Convert to VMDK format
          - **VirtualBox**: Convert to VDI format
          - **QEMU**: Native qcow2 support
          
          ## 📚 Documentation
          
          Full setup guide and documentation: [VM Images README](https://github.com/tphakala/birdnet-go/blob/main/vm-images/README.md)
          
          ## ⚠️ Security Reminders
          
          - **Change default password** immediately after first login
          - **Set up SSH keys** for enhanced security
          - **Enable firewall** if needed: \`sudo ufw enable\`
          - **Keep system updated**: \`sudo apt update && sudo apt upgrade\`
          
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "BirdNET-Go VM Images ${{ steps.version.outputs.version }}"
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'nightly') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 