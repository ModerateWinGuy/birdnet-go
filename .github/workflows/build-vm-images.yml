name: Build VM Images

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the images'
        required: true
        default: 'nightly'
        type: string
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
  schedule:
    # Build monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'

env:
  PACKER_VERSION: "1.10.0"

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build-vm-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="nightly-$(date +%Y%m%d)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Building VM images for version: $VERSION"

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm qemu-utils qemu-system-x86 qemu-system-arm \
            libvirt-daemon-system libvirt-clients bridge-utils virt-manager \
            ovmf qemu-efi-aarch64 zstd

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Setup QEMU for cross-platform builds
        if: matrix.arch == 'arm64'
        run: |
          # Setup QEMU for ARM64 emulation
          sudo apt-get install -y qemu-user-static binfmt-support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create build directories
        run: |
          mkdir -p vm-images/{output,templates,scripts,files}

      - name: Generate SSH keys for build
        run: |
          ssh-keygen -t rsa -b 4096 -f vm-images/build_key -N "" -C "birdnet-go-build-${{ matrix.arch }}"
          chmod 600 vm-images/build_key
          chmod 644 vm-images/build_key.pub

      - name: Create cloud-init templates
        run: |
          # Create meta-data template
          cat > vm-images/templates/meta-data.yml << 'EOF'
          instance-id: birdnet-go-vm
          local-hostname: ${hostname}
          EOF
          
          # Create user-data template
          cat > vm-images/templates/user-data.yml << 'EOF'
          #cloud-config
                     users:
             - name: birdnet
               groups: sudo, docker, audio, adm
               shell: /bin/bash
               sudo: ALL=(ALL) NOPASSWD:ALL
               passwd: \$6\$rounds=4096\$saltstring\$UW6/F2d0U.Ufbq.C/j8lJeJnG\$Ks7Q7gLgq4k.VjL8rP9Q.1.SN7t8xD
               ssh_authorized_keys:
                 - ${ssh_public_key}
           
           # Enable password authentication temporarily for build
           ssh_pwauth: true
          
          # Set timezone
          timezone: UTC
          
          # Network configuration
          network:
            version: 2
            ethernets:
              eth0:
                dhcp4: true
          
          # Resize root filesystem
          growpart:
            mode: auto
            devices: ['/']
          
          # Package updates
          package_update: true
          package_upgrade: true
          
          # Install essential packages
          packages:
            - curl
            - wget
            - git
            - htop
            - nano
            - vim
            - unattended-upgrades
          
          # Write files
          write_files:
            - path: /etc/birdnet-go/version
              content: |
                Version: ${version}
                Architecture: ${arch}
                Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
              owner: root:root
              permissions: '0644'
          
          # Enable automatic security updates
          runcmd:
            - systemctl enable unattended-upgrades
            - systemctl start unattended-upgrades
            - mkdir -p /etc/birdnet-go
            - mkdir -p /opt/birdnet-go/{config,data}
            - chown -R birdnet:birdnet /opt/birdnet-go
          
          # Final message
          final_message: "BirdNET-Go VM is ready! Version: ${version}, Architecture: ${arch}"
          EOF

      - name: Create setup scripts
        run: |
          # Create BirdNET-Go setup script
          cat > vm-images/scripts/setup-birdnet-go.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Setting up BirdNET-Go..."
          
          # Create directories
          sudo mkdir -p /opt/birdnet-go/{config,data,scripts}
          sudo chown -R birdnet:birdnet /opt/birdnet-go
          
          # Download base configuration
          curl -s https://raw.githubusercontent.com/tphakala/birdnet-go/main/internal/conf/config.yaml \
            -o /opt/birdnet-go/config/config.yaml
          
          # Set absolute path for audio clips
          sed -i 's|path: clips/|path: /opt/birdnet-go/data/clips/|' /opt/birdnet-go/config/config.yaml
          
          # Enable XNNPACK for performance
          sed -i 's/usexnnpack: false/usexnnpack: true/' /opt/birdnet-go/config/config.yaml
          
          # Create clips directory
          mkdir -p /opt/birdnet-go/data/clips
          
          # Create systemd service
          sudo tee /etc/systemd/system/birdnet-go.service > /dev/null << 'SERVICE_EOF'
          [Unit]
          Description=BirdNET-Go
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=simple
          User=birdnet
          Group=birdnet
          Restart=always
          RestartSec=10
          
          # Pull latest image
          ExecStartPre=/usr/bin/docker pull tphakala/birdnet-go:nightly
          
          # Remove any existing container
          ExecStartPre=-/usr/bin/docker rm -f birdnet-go
          
          # Run BirdNET-Go
          ExecStart=/usr/bin/docker run --rm \
            --name birdnet-go \
            -p 8080:8080 \
            --device /dev/snd \
            -v /opt/birdnet-go/config:/config \
            -v /opt/birdnet-go/data:/data \
            -e TZ=UTC \
            -e BIRDNET_UID=1000 \
            -e BIRDNET_GID=1000 \
            tphakala/birdnet-go:nightly
          
          # Cleanup
          ExecStop=-/usr/bin/docker stop birdnet-go
          ExecStopPost=-/usr/bin/docker rm -f birdnet-go
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          # Enable service
          sudo systemctl daemon-reload
          sudo systemctl enable birdnet-go.service
          
          # Pull Docker image
          docker pull tphakala/birdnet-go:nightly
          
          echo "BirdNET-Go setup completed"
          EOF
          
          chmod +x vm-images/scripts/setup-birdnet-go.sh

      - name: Create service configuration script
        run: |
          cat > vm-images/scripts/configure-services.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Configuring system services..."
          
          # Configure firewall
          sudo ufw --force enable
          sudo ufw allow ssh
          sudo ufw allow 8080/tcp
          
          # Configure automatic updates
          sudo systemctl enable unattended-upgrades
          
          # Configure log rotation
          sudo tee /etc/logrotate.d/birdnet-go > /dev/null << 'LOGROTATE_EOF'
          /opt/birdnet-go/data/logs/*.log {
            daily
            rotate 7
            compress
            delaycompress
            missingok
            notifempty
            create 0644 birdnet birdnet
            postrotate
              systemctl reload birdnet-go || true
            endscript
          }
          LOGROTATE_EOF
          
          # Create update script
          sudo tee /usr/local/bin/update-birdnet-go > /dev/null << 'UPDATE_EOF'
          #!/bin/bash
          echo "Updating BirdNET-Go..."
          systemctl stop birdnet-go
          docker pull tphakala/birdnet-go:nightly
          systemctl start birdnet-go
          echo "Update completed"
          UPDATE_EOF
          
          sudo chmod +x /usr/local/bin/update-birdnet-go
          
          # Create weekly update cron job
          echo "0 2 * * 0 /usr/local/bin/update-birdnet-go" | sudo tee /etc/cron.d/birdnet-go-update
          
          echo "Service configuration completed"
          EOF
          
          chmod +x vm-images/scripts/configure-services.sh

      - name: Create cleanup script
        run: |
          cat > vm-images/scripts/cleanup.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Cleaning up system..."
          
          # Remove build packages
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          
          # Clear package cache
          sudo apt-get clean
          
          # Clear temporary files
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          
          # Clear logs
          sudo journalctl --vacuum-time=1d
          
          # Clear bash history
          history -c
          rm -f ~/.bash_history
          
          # Clear cloud-init logs and cache
          sudo cloud-init clean --logs
          
          # Clear SSH host keys (will be regenerated on first boot)
          sudo rm -f /etc/ssh/ssh_host_*
          
          # Clear machine ID (will be regenerated)
          sudo truncate -s 0 /etc/machine-id
          
          # Zero out free space for better compression
          sudo dd if=/dev/zero of=/EMPTY bs=1M || true
          sudo rm -f /EMPTY
          
          echo "Cleanup completed"
          EOF
          
          chmod +x vm-images/scripts/cleanup.sh

      - name: Initialize Packer
        working-directory: vm-images
        run: |
          packer init birdnet-go-vm.pkr.hcl

      - name: Validate Packer configuration
        working-directory: vm-images
        run: |
          SSH_PUBLIC_KEY=$(cat build_key.pub)
          packer validate \
            -var "version=${{ steps.version.outputs.version }}" \
            -var "arch=${{ matrix.arch }}" \
            -var "ssh_public_key=$SSH_PUBLIC_KEY" \
            -var "ssh_private_key_file=build_key" \
            birdnet-go-vm.pkr.hcl

      - name: Build VM image
        working-directory: vm-images
        run: |
          echo "🏗️ Building VM image for ${{ matrix.arch }}..."
          SSH_PUBLIC_KEY=$(cat build_key.pub)
          packer build \
            -var "version=${{ steps.version.outputs.version }}" \
            -var "arch=${{ matrix.arch }}" \
            -var "ssh_public_key=$SSH_PUBLIC_KEY" \
            -var "ssh_private_key_file=build_key" \
            birdnet-go-vm.pkr.hcl

      - name: Verify build artifacts
        working-directory: vm-images
        run: |
          ls -la output-${{ matrix.arch }}/
          echo "📦 Build artifacts:"
          for file in output-${{ matrix.arch }}/*; do
            echo "  $(basename $file): $(du -h $file | cut -f1)"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: birdnet-go-vm-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: vm-images/output-${{ matrix.arch }}/*
          retention-days: 30

  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    needs: build-vm-images
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.qcow2.zst*" -exec cp {} release-assets/ \;
          
          echo "📦 Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # BirdNET-Go VM Images ${{ steps.version.outputs.version }}
          
          Pre-built virtual machine images with BirdNET-Go pre-installed and configured.
          
          ## 🎯 Quick Start
          
          1. **Download** the image for your architecture
          2. **Verify** the checksum: \`sha256sum -c *.sha256\`
          3. **Decompress**: \`zstd -d *.qcow2.zst\`
          4. **Create** a separate data disk: \`qemu-img create -f qcow2 birdnet-go-data.qcow2 50G\`
          5. **Run** with both disks attached to your VM
          
          ## 📦 Available Images
          
          - **amd64**: Intel/AMD 64-bit processors
          - **arm64**: ARM 64-bit processors (Apple M1/M2, ARM servers)
          
          ## 🔧 Specifications
          
          - **Base OS**: Ubuntu 24.10 (Oracular Oriole) Server
          - **Architecture**: Two-disk design (OS + Data)
          - **OS Disk**: 8GB (applications, configuration)
          - **Data Disk**: Separate (persistent data, user-defined size)
          - **Format**: qcow2 (compressed with zstd)
          - **Default User**: \`birdnet\` (SSH key authentication)
          - **Web Interface**: http://VM-IP:8080
          - **SSH Access**: Port 22
          
          ## 📖 Documentation
          
          - [VM Images Guide](https://github.com/tphakala/birdnet-go/tree/main/vm-images)
          - [Installation Documentation](https://github.com/tphakala/birdnet-go/tree/main/doc/wiki)
          - [Project Homepage](https://github.com/tphakala/birdnet-go)
          
          ## 🔐 Security
          
          - SSH password authentication disabled
          - Firewall enabled (UFW)
          - Automatic security updates enabled
          - Only necessary ports open (22, 8080)
          
          ## 🚀 Platform Support
          
          - **Proxmox VE**: Direct qcow2 import
          - **libvirt/KVM**: Native support
          - **QEMU**: Direct compatibility
          - **VMware**: Convert to VMDK format
          - **VirtualBox**: Convert to VDI format
          
          ---
          
          **Need help?** Visit our [Discussions](https://github.com/tphakala/birdnet-go/discussions) or [Issues](https://github.com/tphakala/birdnet-go/issues)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "BirdNET-Go VM Images ${{ steps.version.outputs.version }}"
          body_path: release-notes.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'nightly') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 