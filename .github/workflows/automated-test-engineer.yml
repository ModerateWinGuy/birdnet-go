name: Test Failure Monitor

on:
  workflow_run:
    workflows: ["golangci-test"]
    types:
      - completed

jobs:
  create-issue-on-failure:
    if: github.event.workflow_run.conclusion == 'failure'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      actions: read
    steps:
      - name: Download test artifacts
        id: download-logs
        uses: actions/download-artifact@v4
        with:
          name: test-log
          path: /tmp/
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Parse test failures
        id: parse-failures
        run: |
          if [[ -f "/tmp/gotest.log" ]]; then
            echo "Test log found, parsing failures..."

            # Extract failing tests
            echo "## Failed Tests" > /tmp/failed-tests.md
            echo "" >> /tmp/failed-tests.md

            # Extract package information for labeling
            echo "" > /tmp/affected-packages.txt

            # Parse JSON test output for failures
            if command -v jq >/dev/null 2>&1; then
              grep '"Action":"fail"' /tmp/gotest.log | jq -r '
                select(.Test != null) |
                "- **\(.Package)/\(.Test)**: \(.Output // "Test failed")"
              ' | head -20 >> /tmp/failed-tests.md || true

              # Extract package names for labeling
              grep '"Action":"fail"' /tmp/gotest.log | jq -r '
                select(.Test != null) | .Package
              ' | sed 's|github.com/tphakala/birdnet-go/||g' | sort -u >> /tmp/affected-packages.txt || true
            else
              grep -E '"Action":"fail"' /tmp/gotest.log | head -10 >> /tmp/failed-tests.md || true
            fi

            # Extract error messages
            echo "" >> /tmp/failed-tests.md
            echo "## Error Details" >> /tmp/failed-tests.md
            echo "" >> /tmp/failed-tests.md
            echo '```' >> /tmp/failed-tests.md
            grep -A 5 -B 5 "FAIL\|Error\|panic:" /tmp/gotest.log | head -50 >> /tmp/failed-tests.md || true
            echo '```' >> /tmp/failed-tests.md

            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "Found test failures in log"
          else
            echo "No test log found, checking workflow status..."
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "## Failed Tests" > /tmp/failed-tests.md
            echo "Test log artifact not available. Please check the workflow run for details." >> /tmp/failed-tests.md
          fi

      - name: Check if issue already exists
        id: check-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check for existing open test failure issues
          EXISTING_ISSUE=$(gh issue list --repo ${{ github.repository }} --state open --label "test-failure" --limit 1 --json number --jq '.[0].number // empty')
          if [[ -n "$EXISTING_ISSUE" ]]; then
            echo "existing_issue=$EXISTING_ISSUE" >> $GITHUB_OUTPUT
            echo "Found existing test failure issue: #$EXISTING_ISSUE"
          else
            echo "existing_issue=" >> $GITHUB_OUTPUT
            echo "No existing test failure issue found"
          fi

      - name: Create test failure issue
        if: steps.check-issue.outputs.existing_issue == ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the parsed failures
          FAILURE_DETAILS=""
          if [[ -f "/tmp/failed-tests.md" ]]; then
            FAILURE_DETAILS=$(cat /tmp/failed-tests.md)
          fi

          # Create issue with structured failure data
          cat > /tmp/issue-body.md << 'EOF'
          @claude Please analyze and fix the failing unit tests.

          ## Test Failure Details
          - **Workflow Run**: ${{ github.event.workflow_run.html_url }}
          - **Commit**: ${{ github.event.workflow_run.head_sha }}
          - **Branch**: ${{ github.event.workflow_run.head_branch }}
          - **Triggered by**: ${{ github.event.workflow_run.triggering_actor.login }}

          EOF

          # Add parsed failure details
          if [[ -n "$FAILURE_DETAILS" ]]; then
            echo "$FAILURE_DETAILS" >> /tmp/issue-body.md
          fi

          cat >> /tmp/issue-body.md << 'EOF'

          ## Instructions for Claude
          Please:
          1. Analyze the failing tests above
          2. Check out the code and examine the failing test files
          3. Identify the root cause of each failure
          4. Implement fixes following project guidelines in CLAUDE.md
          5. Run the tests to verify fixes work
          6. Run golangci-lint to ensure code quality
          7. Create a PR with the fixes

          ## Guidelines
          - Use `internal/errors` package for error handling (never standard `errors`)
          - Follow modern Go patterns (no time.Sleep in tests)
          - Use `t.TempDir()` for temporary directories
          - Use `t.Parallel()` only when tests are truly independent
          - Structure tests clearly: setup â†’ execution â†’ assertion
          - Only fix failing tests, don't modify working ones
          - Ensure all tests follow the patterns in CLAUDE.md

          ## Available Tools
          You have access to:
          - Reading and editing Go test files
          - Running `go test` commands
          - Running `golangci-lint run -v`
          - Searching the codebase with Grep/Glob
          - Creating commits and PRs
          EOF

          # Create labels if they don't exist
          gh label create "test-failure" --description "Issues related to failing unit tests" --color "d73a4a" 2>/dev/null || true
          gh label create "automated" --description "Issues created by automated systems" --color "0052cc" 2>/dev/null || true

          # Determine package labels from affected packages
          PACKAGE_LABELS="test-failure,automated"
          if [[ -f "/tmp/affected-packages.txt" ]]; then
            while read -r package; do
              if [[ -n "$package" ]]; then
                # Map package paths to labels
                case "$package" in
                  "internal/analysis"*) PACKAGE_LABELS+=",pkg:analysis" ;;
                  "internal/audiocore"*) PACKAGE_LABELS+=",pkg:audiocore" ;;
                  "internal/api"*) PACKAGE_LABELS+=",pkg:api" ;;
                  "internal/birdnet"*) PACKAGE_LABELS+=",pkg:birdnet" ;;
                  "internal/myaudio"*) PACKAGE_LABELS+=",pkg:myaudio" ;;
                  "internal/datastore"*) PACKAGE_LABELS+=",pkg:datastore" ;;
                  "internal/diskmanager"*) PACKAGE_LABELS+=",pkg:diskmanager" ;;
                  "internal/telemetry"*) PACKAGE_LABELS+=",pkg:telemetry" ;;
                  "internal/monitor"*) PACKAGE_LABELS+=",pkg:monitor" ;;
                  "internal/events"*) PACKAGE_LABELS+=",pkg:events" ;;
                  "internal/mqtt"*) PACKAGE_LABELS+=",pkg:mqtt" ;;
                  "internal/notification"*) PACKAGE_LABELS+=",pkg:notification" ;;
                  "internal/birdweather"*) PACKAGE_LABELS+=",pkg:birdweather" ;;
                  "internal/security"*) PACKAGE_LABELS+=",pkg:security" ;;
                  "internal/conf"*) PACKAGE_LABELS+=",pkg:conf" ;;
                  "internal/httpcontroller"*) PACKAGE_LABELS+=",pkg:httpcontroller" ;;
                  "internal/errors"*) PACKAGE_LABELS+=",pkg:errors" ;;
                  "internal/logging"*) PACKAGE_LABELS+=",pkg:logging" ;;
                  "internal/testing"*) PACKAGE_LABELS+=",pkg:testing" ;;
                  "cmd/realtime"*) PACKAGE_LABELS+=",pkg:cmd-realtime" ;;
                  "cmd/file"*) PACKAGE_LABELS+=",pkg:cmd-file" ;;
                  "cmd/directory"*) PACKAGE_LABELS+=",pkg:cmd-directory" ;;
                  "cmd/support"*) PACKAGE_LABELS+=",pkg:cmd-support" ;;
                esac
              fi
            done < /tmp/affected-packages.txt
          fi

          # Remove duplicate labels
          PACKAGE_LABELS=$(echo "$PACKAGE_LABELS" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')

          echo "Applying labels: $PACKAGE_LABELS"

          gh issue create \
            --repo ${{ github.repository }} \
            --title "ðŸ”´ Unit Tests Failing - Automated Fix Needed" \
            --label "$PACKAGE_LABELS" \
            --body-file /tmp/issue-body.md

      - name: Comment on existing issue
        if: steps.check-issue.outputs.existing_issue != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read the parsed failures
          FAILURE_DETAILS=""
          if [[ -f "/tmp/failed-tests.md" ]]; then
            FAILURE_DETAILS=$(cat /tmp/failed-tests.md)
          fi

          # Create comment with failure details
          cat > /tmp/comment-body.md << 'EOF'
          ðŸ”„ **New Test Failure Detected**

          - **Workflow Run**: ${{ github.event.workflow_run.html_url }}
          - **Commit**: ${{ github.event.workflow_run.head_sha }}
          - **Branch**: ${{ github.event.workflow_run.head_branch }}

          EOF

          # Add parsed failure details
          if [[ -n "$FAILURE_DETAILS" ]]; then
            echo "$FAILURE_DETAILS" >> /tmp/comment-body.md
          fi

          echo "" >> /tmp/comment-body.md
          echo "@claude Please analyze these latest test failures and provide fixes." >> /tmp/comment-body.md

          gh issue comment ${{ steps.check-issue.outputs.existing_issue }} \
            --repo ${{ github.repository }} \
            --body-file /tmp/comment-body.md
