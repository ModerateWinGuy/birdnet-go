name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run Go testing and development commands
          allowed_tools: |
            Bash(go test *)
            Bash(go build *)
            Bash(go mod *)
            Bash(golangci-lint run *)
            Bash(make *)
            Bash(git *)
            Read(*_test.go)
            Edit(*_test.go)
            MultiEdit(*_test.go)
            Write(*_test.go)
            Grep(*.go)
            Glob(**/*_test.go)
            Glob(**/*.go)
          
          # Add Go and BirdNET-Go specific instructions
          custom_instructions: |
            You are working on BirdNET-Go, a Go implementation of BirdNET for real-time bird sound identification.
            
            ## Critical Rules
            - **ALWAYS use `internal/errors` package** (never standard `errors`)
            - **Run `golangci-lint run -v` before EVERY commit**
            - **Follow all guidelines in CLAUDE.md exactly**
            
            ## Testing Guidelines
            - Use `t.TempDir()` for temporary directories (automatic cleanup)
            - Use `t.Parallel()` only when tests are truly independent
            - Avoid `time.Sleep()` - use channels/synchronization instead
            - Structure tests: setup → execution → assertion
            - Use table-driven tests with `t.Run()` for comprehensive coverage
            
            ## Error Handling
            - Always use `internal/errors` package
            - Wrap errors with context: `fmt.Errorf("operation failed: %w", err)`
            - Specify `.Component()` and `.Category()` for telemetry
            
            ## Code Quality
            - Use modern Go patterns (any instead of interface{})
            - Use standard library first before external dependencies
            - Follow security best practices
            - Validate all user input
            - Use `for i := range n` for Go 1.22+ patterns
            
            ## When fixing tests
            - Focus ONLY on failing tests
            - Read the test failure details carefully
            - Understand the root cause before fixing
            - Verify fixes by running tests
            - Ensure fixes follow project patterns
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

